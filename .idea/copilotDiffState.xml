<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;def getVersionC() {&#10;    def versionFile = file(&quot;version.properties&quot;)&#10;    if (!versionFile.exists()) {&#10;        versionFile.write(&quot;VERSION_CODE=1\n&quot;)&#10;    }&#10;    def properties = new Properties()&#10;    versionFile.withReader { reader -&gt; properties.load(reader) }&#10;&#10;    int newVersionCode = (properties.getProperty(&quot;VERSION_CODE&quot;)?.toInteger() ?: 1) + 1&#10;    properties.setProperty(&quot;VERSION_CODE&quot;, newVersionCode.toString())&#10;&#10;    versionFile.withWriter { writer -&gt; properties.store(writer, null) }&#10;    return newVersionCode&#10;}&#10;&#10;def getVersionN() {&#10;    return System.getenv(&quot;VERSION_NAME&quot;) ?: &quot;v1.0.0&quot;&#10;}&#10;&#10;android {&#10;    namespace &quot;com.example.appilot&quot;&#10;    compileSdk 34&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.example.appilot&quot;&#10;        minSdk 30&#10;        targetSdk 34&#10;        versionCode getVersionC()&#10;        versionName getVersionN()&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        buildConfigField &quot;String&quot;, &quot;API_KEY&quot;, '\&quot;' + project.properties[&quot;API_KEY&quot;] + '\&quot;'&#10;    }&#10;&#10;    signingConfigs {&#10;        release {&#10;            storeFile file(&quot;../gradle/release.keystore&quot;)&#10;            storePassword System.getenv(&quot;KEYSTORE_PASSWORD&quot;)&#10;            keyAlias System.getenv(&quot;KEY_ALIAS&quot;)&#10;            keyPassword System.getenv(&quot;KEY_PASSWORD&quot;)&#10;        }&#10;    }&#10;    buildTypes {&#10;        release {&#10;            signingConfig signingConfigs.release&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation libs.appcompat&#10;    implementation libs.material&#10;    implementation libs.activity&#10;    implementation libs.constraintlayout&#10;    implementation libs.okhttp&#10;&#10;    // Testing dependencies&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.ext.junit&#10;    androidTestImplementation libs.espresso.core&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;def getVersionC() {&#10;    def versionFile = file(&quot;version.properties&quot;)&#10;    if (!versionFile.exists()) {&#10;        versionFile.write(&quot;VERSION_CODE=1\n&quot;)&#10;    }&#10;    def properties = new Properties()&#10;    versionFile.withReader { reader -&gt; properties.load(reader) }&#10;&#10;    int newVersionCode = (properties.getProperty(&quot;VERSION_CODE&quot;)?.toInteger() ?: 1) + 1&#10;    properties.setProperty(&quot;VERSION_CODE&quot;, newVersionCode.toString())&#10;&#10;    versionFile.withWriter { writer -&gt; properties.store(writer, null) }&#10;    return newVersionCode&#10;}&#10;&#10;def getVersionN() {&#10;    return System.getenv(&quot;VERSION_NAME&quot;) ?: &quot;v1.0.0&quot;&#10;}&#10;&#10;android {&#10;    namespace &quot;com.example.appilot&quot;&#10;    compileSdk 34&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.example.appilot&quot;&#10;        minSdk 30&#10;        targetSdk 34&#10;        versionCode getVersionC()&#10;        versionName getVersionN()&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        buildConfigField &quot;String&quot;, &quot;API_KEY&quot;, '\&quot;' + project.properties[&quot;API_KEY&quot;] + '\&quot;'&#10;    }&#10;&#10;    signingConfigs {&#10;        release {&#10;            storeFile file(&quot;../gradle/release.keystore&quot;)&#10;            storePassword System.getenv(&quot;KEYSTORE_PASSWORD&quot;)&#10;            keyAlias System.getenv(&quot;KEY_ALIAS&quot;)&#10;            keyPassword System.getenv(&quot;KEY_PASSWORD&quot;)&#10;        }&#10;    }&#10;    buildTypes {&#10;        release {&#10;            signingConfig signingConfigs.release&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;&#10;    buildFeatures {&#10;        buildConfig true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation libs.appcompat&#10;    implementation libs.material&#10;    implementation libs.activity&#10;    implementation libs.constraintlayout&#10;    implementation libs.okhttp&#10;&#10;    // Testing dependencies&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.ext.junit&#10;    androidTestImplementation libs.espresso.core&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>